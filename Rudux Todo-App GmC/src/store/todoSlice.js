import { createSlice } from "@reduxjs/toolkit";

createSlice;

const todoSlice = createSlice({
  name: "todos", // A name for this slice of state
  initialState: {
    // Initial state for your todos and the current filter setting
    todos: [
      { id: 1, description: "Learn Redux Toolkit", isDone: false },
      { id: 2, description: "Build ToDo App", isDone: true },
      { id: 3, description: "Practice React Hooks", isDone: false },
    ],
    filter: "all", // 'all', 'done', 'not_done'
  },
  reducers: {
    // Action to add a new todo
    addTodo: (state, action) => {
      const newId =
        state.todos.length > 0
          ? Math.max(...state.todos.map((todo) => todo.id)) + 1
          : 1;
      state.todos.push({
        id: newId,
        description: action.payload, // The description is passed as payload
        isDone: false, // New tasks are initially not done
      });
    },
    // Action to toggle the 'isDone' status of a todo
    toggleDone: (state, action) => {
      const todo = state.todos.find((t) => t.id === action.payload);
      if (todo) {
        todo.isDone = !todo.isDone; // Immer allows direct mutation here
      }
    },
    // Action to edit the description of a todo
    editTask: (state, action) => {
      const { id, newDescription } = action.payload;
      const todo = state.todos.find((t) => t.id === id);
      if (todo) {
        todo.description = newDescription;
      }
    },
    // Action to set the current filter
    setFilter: (state, action) => {
      state.filter = action.payload;
    },
  },
});

// Export the actions generated by createSlice
export const { addTodo, toggleDone, editTask, setFilter } = todoSlice.actions;

// Export the reducer function for the store
export default todoSlice.reducer;
